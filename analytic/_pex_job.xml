<analytic>
	<analytic>.pex.job</analytic>
	<code_text>.pex.job.jobList:([jobID:()]rSpecID:();jobDescription:();plotPer:();plotPerFreq:();revPer:();revPerFreq:();statPer:();statPerFreq:();waitPer:();waitPerFreq:();execExpiryDt:();kWords:();dtCreated:();usrCreated:()); 
.pex.job.jobSchedule:([]jobID:();execDt:();plotStDt:();plotEndDt:();revStDt:();revEndDt:();statStDt:();statEndDt:();active:();jobStatus:()); 

`.pex.job.jobList upsert (0i;`dummy;"Dummy Job";90;`days;60;`days;30;`days;5;`days;2020.01.01;"Dummy Keyword";.z.D;`sysAdmin);

// Get list of jobs
.pex.job.ui.getAllJobs:{[]
    
    res:select from .pex.job.jobList where jobID &gt; 0;
    :res;
    
    };

// Create New Job
.pex.job.ui.createNewJob:{[dictNewJob]

    newJobID:1+max (key .pex.job.jobList)[`jobID];
    
    // Add Validation to it
    `.pex.job.jobList upsert  (newJobID, (value dictNewJob), .z.D,.pm.u);
    
    .pex.job.createJobSchedule[newJobID];

   };

// dictNewJob:`rSpecID`jobDescription`plotPer`plotPerFreq`revPer`revPerFreq`statPer`statPerFreq`waitPer`waitPerFreq`execExpiryDt`kWords!(`testing;"This is a test description";90;`days;60;`days;30;`days;5;`days;2020.01.01;"Dummy Keyword")
// .pex.job.ui.createNewJob[dictNewJob]

// Get RSpec Header Information for RSpec selection screen
.pex.job.ui.getRspecHeader:{[]
    
    // Needs to be permissioned
    
    res:select RspecName, Version, Description, CreatedBy, TopicKeywords from RspecHeader where Active;
    :res;
    
    };

// Create Job Schedule
.pex.job.createJobSchedule:{[jID]
    jDetails:() xkey select from .pex.job.jobList where jobID = jID;
    // Need to update to check for months/years and not just days (move to utility fuctions)
    $[first jDetails[`plotPerFreq] = `days; plotFunc:{[x;y] y-x}; first jDetails[`plotPerFreq] = `weeks; plotFunc:{[x;y] y-(7*x)}; first jDetails[`plotPerFreq] = `months; plotFunc:{[x;y] .Q.addmonths[y;-1*x]}; first jDetails[`plotPerFreq] = `years; plotFunc:{[x;y] .Q.addmonths[y;-12*x]}];
    $[first jDetails[`revPerFreq] = `days; revFunc:{[x;y] y-x}; first jDetails[`revPerFreq] = `weeks; revFunc:{[x;y] y-(7*x)}; first jDetails[`revPerFreq] = `months; revFunc:{[x;y] .Q.addmonths[y;-1*x]}; first jDetails[`revPerFreq] = `years; revFunc:{[x;y] .Q.addmonths[y;-12*x]}];
    $[first jDetails[`waitPerFreq] = `days; waitFunc:{[x;y] y-x}; first jDetails[`waitPerFreq] = `weeks; waitFunc:{[x;y] y-(7*x)}; first jDetails[``waitPerFreq] = `months; waitFunc:{[x;y] .Q.addmonths[y;-1*x]}; first jDetails[`waitPerFreq] = `years; waitFunc:{[x;y] .Q.addmonths[y;-12*x]}];
    $[first jDetails[`statPerFreq] = `days; statFunc:{[x;y] y-x}; first jDetails[`statPerFreq] = `weeks; statFunc:{[x;y] y-(7*x)}; first jDetails[`statPerFreq] = `months; statFunc:{[x;y] .Q.addmonths[y;-1*x]}; first jDetails[`statPerFreq] = `years; statFunc:{[x;y] .Q.addmonths[y;-12*x]}];
    $[first jDetails[`revPerFreq] = `days; revMod:1; first jDetails[`revPerFreq] = `weeks; revMod:7; first jDetails[`revPerFreq] = `months; revMod:30; first jDetails[`revPerFreq] = `years; revMod:365];
    noExecutions:first floor (jDetails[`execExpiryDt]-jDetails[`dtCreated] )%(revMod*jDetails[`revPer]);
    if[not noExecutions &gt; 0;
        strErr:"No jobs to schedule ";
        .log.err[.z.h;strErr;(jDetails[`execExpiryDt];jDetails[`dtCreated])];
        :`$strErr;
        ];
    /execSchedule:(first jDetails[`dtCreated]+jDetails[`waitPer])+(first jDetails[`revPer])*til noExecutions;
    execSchedule: revFunc[-1*((first jDetails[`revPer])*til noExecutions);waitFunc[-1*first jDetails[`waitPer];first jDetails[`dtCreated]]];
    plotEndDtList:revEndDtList:statEndDtList:waitFunc[(first jDetails[`waitPer]);execSchedule];
    plotStartDtList:plotFunc[(first jDetails[`plotPer]);plotEndDtList];
    revStartDtList:revFunc[(first jDetails[`revPer]);revEndDtList];
    statStartDtList:statFunc[(first jDetails[`statPer]);statEndDtList];

    `.pex.job.jobSchedule upsert flip (cols .pex.job.jobSchedule)!((count execSchedule)#jID;execSchedule;plotStartDtList;plotEndDtList;revStartDtList;revEndDtList;statStartDtList;statEndDtList;(count execSchedule)#1b;(count execSchedule)#`scheduled)

    };

// Get schedule for the jobID
.pex.job.getJobSchedule:{[jID]
    
    :`execDt xdesc select from .pex.job.jobSchedule where jobID = jID;
    
    };


</code_text>
	<description></description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Instruction</typ>
	<private>1</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
</analytic>
